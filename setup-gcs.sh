#!/bin/bash

# Script para configurar Google Cloud Storage para upload de arquivos grandes
# Execute este script ap√≥s fazer deploy no Cloud Run

PROJECT_ID="${1:-your-project-id}"
BUCKET_NAME="${2:-i2a2-eda-uploads}"
REGION="${3:-us-central1}"

echo "üóÑÔ∏è Configurando Google Cloud Storage..."
echo "üìã Projeto: $PROJECT_ID"
echo "ü™£ Bucket: $BUCKET_NAME"
echo "üåç Regi√£o: $REGION"

# Verificar se est√° logado
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q "@"; then
    echo "‚ùå Fa√ßa login no Google Cloud primeiro:"
    echo "   gcloud auth login"
    exit 1
fi

# Definir projeto
echo "üìù Configurando projeto..."
gcloud config set project $PROJECT_ID

# Verificar se bucket j√° existe
if gsutil ls gs://$BUCKET_NAME 2>/dev/null; then
    echo "‚úÖ Bucket $BUCKET_NAME j√° existe"
else
    echo "üÜï Criando bucket $BUCKET_NAME..."
    gsutil mb -p $PROJECT_ID -c STANDARD -l $REGION gs://$BUCKET_NAME
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Bucket criado com sucesso!"
    else
        echo "‚ùå Erro ao criar bucket"
        exit 1
    fi
fi

# Configurar CORS para permitir uploads diretos do browser
echo "üîß Configurando CORS..."
cat > cors.json << EOF
[
    {
        "origin": ["https://*.streamlit.app", "https://*.run.app", "http://localhost:*"],
        "method": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "responseHeader": ["Content-Type", "Access-Control-Allow-Origin"],
        "maxAgeSeconds": 3600
    }
]
EOF

gsutil cors set cors.json gs://$BUCKET_NAME

if [ $? -eq 0 ]; then
    echo "‚úÖ CORS configurado com sucesso!"
    rm cors.json
else
    echo "‚ùå Erro ao configurar CORS"
    rm cors.json
    exit 1
fi

# Configurar lifecycle para limpar uploads antigos (opcional)
echo "üßπ Configurando limpeza autom√°tica..."
cat > lifecycle.json << EOF
{
    "rule": [
        {
            "action": {"type": "Delete"},
            "condition": {
                "age": 1,
                "matchesPrefix": ["uploads/"]
            }
        }
    ]
}
EOF

gsutil lifecycle set lifecycle.json gs://$BUCKET_NAME

if [ $? -eq 0 ]; then
    echo "‚úÖ Lifecycle configurado (arquivos tempor√°rios ser√£o removidos ap√≥s 1 dia)"
    rm lifecycle.json
else
    echo "‚ö†Ô∏è Aviso: Erro ao configurar lifecycle (n√£o cr√≠tico)"
    rm lifecycle.json
fi

# Configurar permiss√µes para o Cloud Run
echo "üîê Configurando permiss√µes..."

# Obter email do servi√ßo do Cloud Run (assumindo que j√° foi deployado)
SERVICE_ACCOUNT=$(gcloud run services describe i2a2-eda-platform --region=$REGION --format="value(spec.template.spec.serviceAccountName)" 2>/dev/null || echo "")

if [ -z "$SERVICE_ACCOUNT" ]; then
    echo "‚ö†Ô∏è Servi√ßo Cloud Run n√£o encontrado. Configure as permiss√µes manualmente:"
    echo "   1. V√° para IAM & Admin no Console"
    echo "   2. Adicione a role 'Storage Object Admin' para a conta de servi√ßo do Cloud Run"
else
    echo "üìß Conta de servi√ßo: $SERVICE_ACCOUNT"
    
    # Dar permiss√µes de Storage Object Admin
    gsutil iam ch serviceAccount:$SERVICE_ACCOUNT:objectAdmin gs://$BUCKET_NAME
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Permiss√µes configuradas!"
    else
        echo "‚ö†Ô∏è Erro ao configurar permiss√µes automaticamente"
        echo "Configure manualmente no Console do Google Cloud"
    fi
fi

echo ""
echo "üéâ Configura√ß√£o conclu√≠da!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Atualize as vari√°veis de ambiente no Cloud Run:"
echo "   GOOGLE_CLOUD_PROJECT=$PROJECT_ID"
echo "   GCS_BUCKET_NAME=$BUCKET_NAME"
echo ""
echo "2. Ou configure no secrets.toml:"
echo "   GOOGLE_CLOUD_PROJECT = \"$PROJECT_ID\""
echo "   GCS_BUCKET_NAME = \"$BUCKET_NAME\""
echo ""
echo "3. Redeploy sua aplica√ß√£o"
echo ""
echo "üîó Links √∫teis:"
echo "   Bucket: https://console.cloud.google.com/storage/browser/$BUCKET_NAME"
echo "   IAM: https://console.cloud.google.com/iam-admin/iam"